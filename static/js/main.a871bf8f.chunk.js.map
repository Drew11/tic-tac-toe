{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","playerStep","index","cell","react_default","a","createElement","onClick","className","Board","cells","map","components_Cell","key","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","whoNext","countStep","winner","toConsumableArray","_winLies$filter","filter","combo","_combo","slicedToArray","b","c","winCombo","getWinner","setState","resetGame","Array","fill","_this$state2","components_Board","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a871bf8f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Cell({playerStep, index, cell}) {\r\n\r\n        return <div\r\n            onClick={()=>playerStep(index)}\r\n            className={\"cell\"}>\r\n            {cell}\r\n        </div>\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport Cell from \"./Cell\"\r\n\r\nfunction Board({cells, playerStep}) {\r\n\r\n    return <div\r\n    className={\"board\"}\r\n    >{\r\n        cells.map((cell, index)=><Cell\r\n                            playerStep={playerStep}\r\n                            index={index}\r\n                            cell={cell}\r\n                            key={index}\r\n                            />\r\n        )\r\n    }\r\n    </div>\r\n\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './components/Board'\r\nimport './App.css';\r\n\r\nclass Game extends React.Component  {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n        cells: Array(9).fill(null),\r\n        whoNext: 'X',\r\n        countStep: 0,\r\n        winner: null\r\n    };\r\n  }\r\n\r\n  playerStep=(index)=>{\r\n      let {cells, whoNext, countStep, winner} = this.state;\r\n      cells=[...cells];\r\n      if(cells[index] || winner){\r\n          return;\r\n      }\r\n\r\n      cells[index]=whoNext;\r\n      countStep= countStep+1;\r\n      whoNext = whoNext==='X' ? '0': 'X';\r\n      winner=getWinner(cells);\r\n\r\n      this.setState({\r\n         cells: cells,\r\n         whoNext: whoNext,\r\n         countStep: countStep,\r\n         winner: winner,\r\n      });\r\n\r\n  };\r\n\r\n  resetGame=()=>{\r\n      this.setState({\r\n          cells: Array(9).fill(null),\r\n          whoNext: 'X',\r\n          countStep: 0,\r\n          winner: null\r\n      });\r\n\r\n  };\r\n  render(){\r\n      const {whoNext, winner, countStep} = this.state;\r\n\r\n      return (\r\n      <div className=\"tic-tac-toe\">\r\n        <div className={\"game-status\"}>\r\n            <h3>Step: {countStep}</h3>\r\n            <h3>Who Next: {whoNext}</h3>\r\n            {\r\n                winner ?\r\n                    <h3 >Winner: <span className={'winner'}>{winner}</span></h3> :\r\n                    <h3> Winner: {winner}</h3>\r\n            }\r\n\r\n        </div>\r\n        <div className=\"container\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <Board\r\n             playerStep={this.playerStep}\r\n             cells={this.state.cells}\r\n            />\r\n            {winner || countStep===9 ?\r\n                <button\r\n                className={\"reset\"}\r\n                onClick={this.resetGame}\r\n                >Reset</button>:\r\n                null\r\n            }\r\n        </div>\r\n      </div>\r\n  );\r\n  }\r\n}\r\n\r\nfunction getWinner(cells) {\r\n\r\n    const winLies =[\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    const [winCombo] = winLies.filter((combo)=>{\r\n        let [a, b, c] = combo;\r\n        return cells[a] && cells[a]===cells[b] && cells[b]===cells[c]\r\n    });\r\n\r\n    if(winCombo){\r\n        return cells[winCombo[0]];\r\n    }else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport default Game;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Game />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}